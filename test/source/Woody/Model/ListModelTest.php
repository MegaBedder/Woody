<?php

namespace Woody\Model;

/**
 * Test class for ListModel.
 * Generated by PHPUnit on 2011-11-30 at 22:59:58.
 */
class ListModelTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var \Woody\Model\ListModel
   */
  private $listModel = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->listModel = new ListModel();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {

  }

  /**
   * @covers \Woody\Model\ListModel::__construct
   */
  public function testConstruct() {
    $this->listModel = new ListModel(new \ArrayObject($rawData = array(1, 2, 3, 4, 5)));

    $this->assertEquals(count($rawData), $this->listModel->count());

    foreach($rawData as $index => $item) {
      $this->assertEquals($item, $this->listModel->getElementAt($index));
    }
  }

  /**
   * @covers \Woody\Model\ListModel::setData
   */
  public function testSetData() {
    $data = new \ArrayObject($rawData = array(1, 2, 3, 4, 5));

    $this->listModel->setData($data);

    $this->assertEquals(count($rawData), $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::addElement
   */
  public function testAddElement() {
    $this->listModel->setData(new \ArrayObject());

    $this->listModel->addElement("a");

    $this->assertEquals(1, $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::addElements
   */
  public function testAddElementsZeroIndexed() {
    $this->listModel->setData(new \ArrayObject());

    $array = array_fill(0, 5, 'a');
    $this->listModel->addElements(new \ArrayObject($array));

    $this->assertEquals(count($array), $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::addElements
   */
  public function testAddElementsNonZeroIndexed() {
    $this->listModel->setData(new \ArrayObject());

    $array = array_fill(5, 5, 'a');
    $this->listModel->addElements(new \ArrayObject($array));

    $this->assertEquals(count($array), $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::addElements
   */
  public function testAddElementsNonLinearIndexed() {
    $this->listModel->setData(new \ArrayObject());

    for($i = 0; $i < 5; $i++) {
      $array[mt_rand(100, 1000)] = 'a';
    }

    $this->listModel->addElements(new \ArrayObject($array));

    $this->assertEquals(count($array), $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::getElementAt
   */
  public function testGetElementAt() {
    $this->listModel->setData(new \ArrayObject(array('a')));

    $this->assertEquals('a', $this->listModel->getElementAt(0));
    $this->assertEquals(null, $this->listModel->getElementAt(-1));
    $this->assertEquals(null, $this->listModel->getElementAt(1));
  }

  /**
   * @covers \Woody\Model\ListModel::getIndexOf
   */
  public function testGetIndexOf() {
    $this->listModel->setData(new \ArrayObject(array('a')));

    $this->assertEquals(0, $this->listModel->getIndexOf('a'));
    $this->assertEquals(-1, $this->listModel->getIndexOf('b'));

    $this->listModel->setData(new \ArrayObject(array('a', 'a')));
    $this->assertEquals(0, $this->listModel->getIndexOf('a'));

    for($i = 0; $i < 5; $i++) {
      $array[mt_rand(100, 1000)] = 'c';
    }
    $this->listModel->addElements(new \ArrayObject($array));
    $this->assertEquals(2, $this->listModel->getIndexOf('c'));
  }

  /**
   * @covers \Woody\Model\ListModel::count
   */
  public function testCount() {
    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->setData(new \ArrayObject());
    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->setData(new \ArrayObject(array()));
    $this->assertEquals(0, $this->listModel->count());

    $data = array();
    for($i = 0; $i < 5; $i++) {
      $data[] = 'c';
    }
    $this->listModel->setData(new \ArrayObject($data));
    $this->assertEquals(5, $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::insertElementAt
   */
  public function testInsertElementAt() {
    $this->listModel->setData(new \ArrayObject());
    $this->listModel->insertElementAt('a', 5);

    $this->assertEquals('a', $this->listModel->getElementAt(0));
    $this->assertEquals(null, $this->listModel->getElementAt(5));

    $this->listModel->setData(new \ArrayObject(array('a', 'b', 'd', 'e')));
    $this->listModel->insertElementAt('c', 2);
    $this->assertEquals('a', $this->listModel->getElementAt(0));
    $this->assertEquals('b', $this->listModel->getElementAt(1));
    $this->assertEquals('c', $this->listModel->getElementAt(2));
    $this->assertEquals('d', $this->listModel->getElementAt(3));
    $this->assertEquals('e', $this->listModel->getElementAt(4));
  }

  /**
   * @covers \Woody\Model\ListModel::removeAllElements
   */
  public function testRemoveAllElements() {
    $this->assertEquals(0, $this->listModel->count());
    $this->listModel->removeAllElements();
    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->setData(new \ArrayObject(array('a', 'b', 'd', 'e')));
    $this->assertNotEquals(0, $this->listModel->count());

    $this->listModel->removeAllElements();
    $this->assertEquals(0, $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::removeElement
   */
  public function testRemoveElement() {
    $this->assertEquals(0, $this->listModel->count());
    $this->listModel->removeElement('a');
    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->setData(new \ArrayObject(array('a', 'b', 'd', 'e')));
    $this->listModel->removeElement('a');
    $this->assertEquals('b', $this->listModel->getElementAt(0));
    $this->assertEquals(3, $this->listModel->count());

    $this->listModel->removeElement('a');
    $this->assertEquals('b', $this->listModel->getElementAt(0));
    $this->assertEquals(3, $this->listModel->count());

    $this->listModel->removeElement('e');
    $this->assertEquals('b', $this->listModel->getElementAt(0));
    $this->assertEquals(null, $this->listModel->getElementAt(3));
    $this->assertEquals(2, $this->listModel->count());
  }

  /**
   * @covers \Woody\Model\ListModel::removeElementAt
   */
  public function testRemoveElementAt() {
    $this->assertEquals(0, $this->listModel->count());
    $this->listModel->removeElementAt(0);

    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->removeElementAt(-1);
    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->removeElementAt(1);
    $this->assertEquals(0, $this->listModel->count());

    $this->listModel->setData(new \ArrayObject(array('a', 'b', 'd', 'e')));

    $this->listModel->removeElementAt(-1);
    $this->assertEquals(4, $this->listModel->count());

    $this->listModel->removeElementAt(3);
    $this->assertEquals(3, $this->listModel->count());
    $this->assertEquals(null, $this->listModel->getElementAt(3));
    $this->assertEquals('b', $this->listModel->getElementAt(1));

    $this->listModel->removeElementAt(1);
    $this->assertEquals(2, $this->listModel->count());
    $this->assertEquals(null, $this->listModel->getElementAt(2));
    $this->assertEquals('d', $this->listModel->getElementAt(1));
  }

  /**
   * @covers \Woody\Model\ListModel::attach
   */
  public function testAttach() {
    $observer = $this->getMock('SplObserver', array('update'));
    $observer->expects($this->once())->method('update');

    $this->listModel->attach($observer);
    $this->listModel->addElement('a');
  }

  /**
   * @covers \Woody\Model\ListModel::detach
   */
  public function testDetach() {
    $observer = $this->getMock('SplObserver', array('update'));
    $observer->expects($this->once())->method('update');

    $this->listModel->attach($observer);
    $this->listModel->addElement('a');

    $this->listModel->detach($observer);
    $this->listModel->addElement('a');
    $observer->expects($this->never())->method('update');
  }

  /**
   * @covers \Woody\Model\ListModel::notify
   */
  public function testNotify() {
    $observer = $this->getMock('SplObserver', array('update'));
    $observer->expects($this->once())
            ->method('update');

    $this->listModel->attach($observer);
    $this->listModel->addElement('a');
  }
}
