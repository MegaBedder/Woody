<?php

namespace Woody\Model;

use \Utils\Tree\TreeNode;

/**
 * Test class for DefaultTreeModel.
 * Generated by PHPUnit on 2011-11-30 at 22:59:58.
 */
class DefaultTreeModelTest extends \PHPUnit_Framework_TestCase {

  /**
   * the tree model to test
   *
   * @var DefaultTreeModel
   */
  private $treeModel  = null;

  /**
   * the root of the tree model
   *
   * @var TreeNode
   */
  private $root       = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->root = $this->getRootNode();

    $this->treeModel = new DefaultTreeModel($this->root);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests that creating the tree model succeeds.
   *
   * @covers \Woody\Model\DefaultTreeModel::__construct
   */
  public function testConstruct() {
    $this->root = $this->getRootNode();
    $this->treeModel = new DefaultTreeModel($this->root);

    $this->assertEquals($this->root, $this->treeModel->getRoot());
  }

  /**
   * This method barely tests that when getChild is called, the call is forwarded to the tree node and returned
   * unchanged.
   *
   * @covers \Woody\Model\DefaultTreeModel::getChild
   */
  public function testGetChild() {
    $child1 = $this->getChildNode();

    $this->root->expects($this->any())
      ->method('getChildAtIndex')
      ->will($this->returnValue($child1));

    $this->assertEquals($this->treeModel->getChild($this->root, 0), $child1);
  }

  /**
   * This method barely tests that when getChildCount is called, the call is forwarded to the tree node and returned
   * unchanged.
   *
   * @covers \Woody\Model\DefaultTreeModel::getChildCount
   */
  public function testGetChildCount() {
    $this->root->expects($this->any())
      ->method('getDegree')
      ->will($this->returnValue(0));

    $this->assertEquals(0, $this->treeModel->getChildCount($this->root));
  }

  /**
   * This method barely tests that when getIndexOfChild is called, the call is forwarded to the tree node and returned
   * unchanged.
   *
   * @covers \Woody\Model\DefaultTreeModel::getIndexOfChild
   */
  public function testGetIndexOfChild() {
    $this->root->expects($this->any())
      ->method('getIndexOfChild')
      ->will($this->returnValue(0));

    $this->assertEquals(0, $this->treeModel->getIndexOfChild($this->root, $this->getChildNode()));
  }

  /**
   * This method barely tests that when isLeaf is called, the call is forwarded to the tree node and returned unchanged.
   *
   * @covers \Woody\Model\DefaultTreeModel::isLeaf
   */
  public function testIsLeaf() {
    $this->root->expects($this->any())
      ->method('isLeaf')
      ->will($this->returnValue(FALSE));

    $this->assertFalse($this->treeModel->isLeaf($this->root));
  }

  /**
   * This method tests that, when an observer is attached and a child is appended, update() has to be called once on the
   * observer.
   *
   * @covers \Woody\Model\DefaultTreeModel::appendChild
   */
  public function testAppenChild() {
    $observer = $this->getObserver();

    $observer->expects($this->once())->method('update');
    $this->treeModel->attach($observer);
    $this->treeModel->appendChild($this->root, $this->getChildNode());
  }

  /**
   * This method tests that, when attaching an observer and appending a child, update() has to be called once on the
   * observer.
   *
   * @covers \Woody\Model\DefaultTreeModel::attach
   */
  public function testAttach() {
    $observer = $this->getObserver();

    $observer->expects($this->once())->method('update');
    $this->treeModel->attach($observer);
    $this->treeModel->appendChild($this->root, $this->getChildNode());
  }

  /**
   * This method tests that, when attaching an observer and appending a child, update() has to be called once on the
   * observer - called within notify() of the tree model.
   *
   * @covers \Woody\Model\DefaultTreeModel::notify
   */
  public function testNotify() {
    $observer = $this->getObserver();

    $observer->expects($this->once())->method('update');
    $this->treeModel->attach($observer);
    $this->treeModel->appendChild($this->root, $this->getChildNode());
  }

  /**
   * This method tests that, when attaching an observer and appending a child, update() has to be called once on the
   * observer, but when detaching it, update() is not called anymore.
   *
   * @covers \Woody\Model\DefaultTreeModel::detach
   */
  public function testDetach() {
    $observer = $this->getObserver();

    $observer->expects($this->once())->method('update');
    $this->treeModel->attach($observer);
    $this->treeModel->appendChild($this->root, $this->getChildNode());

    $observer->expects($this->never())->method('update');
    $this->treeModel->detach($observer);
    $this->treeModel->appendChild($this->root, $this->getChildNode());
  }

  /**
   * This method returns the default mock object for the observer.
   *
   * @return SplObserver the default mock object for the observer
   */
  private function getObserver() {
    return $this->getMockBuilder('\SplObserver')
      ->disableOriginalConstructor()
      ->setMethods(array('update'))
      ->getMock();
  }

  /**
   * This method returns the default mock object for the root of the tree model.
   *
   * @return TreeNode the default mock object for the root
   */
  private function getRootNode() {
    return $this->getMockBuilder('\Utils\Tree\TreeNode')
      ->setConstructorArgs(array('root'))
      ->setMethods(array())
      ->getMock();
  }

  /**
   * This method returns the default mock object for a node of the tree model.
   *
   * @return TreeNode the default mock object for a node of the tree model
   */
  private function getChildNode() {
    return $this->getMockBuilder('\Utils\Tree\TreeNode')
      ->setConstructorArgs(array('childNode'))
      ->setMethods(array())
      ->getMock();
  }
}
