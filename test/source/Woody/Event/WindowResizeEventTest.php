<?php

namespace Woody\Event;

use \Woody\App\TestApplication;
use \Woody\Components\Timer\Timer;
use \Woody\Components\Windows\MainWindow;
use \Utils\Geom\Point;
use \Utils\Geom\Dimension;

/**
 * Test class for WindowResizeEvent.
 * Generated by PHPUnit on 2012-09-04 at 21:02:21.
 */
class WindowResizeEventTest extends \PHPUnit_Framework_TestCase {
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }
  
 /**
   * This method tests dispatching the event.
   *
   * @covers \Woody\Event\WindowResizeEvent::dispatch
   */
  public function testDispatch() {
    $window = new MainWindow('MainWindow', new Point(50, 50), new Dimension(300, 200));
    $window->create();
    
    $resizeListener = $this->getMockBuilder('\Woody\Event\WindowResizeAdapter')
      ->disableOriginalConstructor()
      ->getMock();
    
    $resizeListener->expects($this->once())->method('windowResized');
    $window->addWindowResizeListener($resizeListener);

    $event = new WindowResizeEvent(new EventInfo($window->getControlID(), 0, $window, WBC_RESIZE, 0));
    $event->dispatch();
    
    $window->close();
  }
  
  /**
   * @covers \Woody\Event\WindowResizeEvent::__construct
   * @covers \Woody\Event\Event::__construct
   * @covers \Woody\Event\WindowResizeEvent::getOldDimension
   * @covers \Woody\Event\WindowResizeEvent::getNewDimension
   * @covers \Woody\Event\WindowResizeEvent::getDeltaDimension
   */
  public function testDim() {
    $window = new MainWindow('MainWindow', new Point(50, 50), new Dimension(300, 200));
    $window->create();
    
    // simulate an event - no real event will be triggered, as event loop is not running ...
    wb_set_size($window->getControlID(), 400, 250);

    // ... therefore, we have to build our own
    $event = new WindowResizeEvent(new EventInfo($window->getControlID(), 0, $window, WBC_RESIZE, 0));
    $event->dispatch();
    
    $this->assertEquals(new Dimension(300, 200), $event->getOldDimension());
    $this->assertEquals(new Dimension(400, 250), $event->getNewDimension());
    $this->assertEquals(new Dimension(100, 50), $event->getDeltaDimension());
    
    $window->close();
  }
}