<?php

namespace Woody\Event;

use \Woody\App\TestApplication;
use \Woody\Components\Timer\Timer;
use \Utils\Geom\Dimension;

/**
 * Test class for WindowResizeEvent.
 * Generated by PHPUnit on 2012-09-04 at 21:02:21.
 */
class WindowResizeEventTest extends \PHPUnit_Framework_TestCase {
  /**
   * the test application
   *
   * @var \Woody\App\TestApplication
   */
  private $application = null;

  /**
   * flag to determine, if the window-resizing test has already been fully initialized
   *
   * @var boolean
   */
  private $isInitialized = null;

  /**
   * flag to determine, if theassertions in the window-resizing test have already been fully processed
   *
   * @var boolean
   */
  private $isAsserted = null;

  /**
   * the timer for the test application
   *
   * @var \Woody\Components\Timer\Timer
   */
  private $timer = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * @covers \Woody\Event\WindowResizeEvent::__construct
   * @covers \Woody\Event\Event::__construct
   * @covers \Woody\Event\WindowResizeEvent::getOldDimension
   * @covers \Woody\Event\WindowResizeEvent::getNewDimension
   * @covers \Woody\Event\WindowResizeEvent::getDeltaDimension
   */
  public function testDimensions() {
    $this->application = new TestApplication();

    $this->isInitialized  = false;
    $this->isAsserted     = false;

    $timerCallback = function() {
      if(!$this->isInitialized) {
        $resizeCallback = function(WindowResizeEvent $resizeEvent) {
          // here the assertions will be performed
          $this->assertEquals(new Dimension(300, 200), $resizeEvent->getOldDimension());
          $this->assertEquals(new Dimension(400, 250), $resizeEvent->getNewDimension());
          $this->assertEquals(new Dimension(100, 50), $resizeEvent->getDeltaDimension());
          $this->isAsserted = true;
        };
        $this->application->getWindow()->addWindowResizeListener(new WindowResizeAdapter($resizeCallback));

        // resize the window
        $old    = $this->application->getWindow()->getDimension();
        $delta  = new Dimension(100, 50);
        $new    = $old->resizeBy($delta);
        $this->application->getWindow()->resizeTo($new);

        $this->isInitialized = true;
      }

      // only destroy the test once the assertions have been executed
      if($this->isAsserted) {
        $this->timer->destroy();
        $this->application->stop();
      }
    };

    $this->timer = new Timer($timerCallback, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();

    $this->application->start();
  }
}