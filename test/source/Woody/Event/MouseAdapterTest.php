<?php

namespace ws\loewe\Woody\Event;

/**
 * Test class for MouseAdapter.
 * Generated by PHPUnit on 2012-06-27 at 20:22:37.
 */
class MouseAdapterTest extends \PHPUnit_Framework_TestCase {
  /**
   * @var MouseAdapter the adapter to test
   */
  private $adapter = null;

  /**
   * @var boolean simple flag to determine, if the callback was executed
   */
  private $callbackExecuted = 0;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method test the constructor of the adapter
   *
   * @covers ws\loewe\Woody\Event\MouseAdapter::__construct
   */
  public function testConstruct() {
    $this->adapter = new MouseAdapter(null, null);
    $this->assertInstanceOf('ws\loewe\Woody\Event\MouseAdapter', $this->adapter);

    $this->adapter = new MouseAdapter(function(){}, function(){});
    $this->assertInstanceOf('ws\loewe\Woody\Event\MouseAdapter', $this->adapter);
  }

  /**
   * This method test the callback execution when a key is pressed and released.
   *
   * @covers ws\loewe\Woody\Event\MouseAdapter::mousePressed
   * @covers ws\loewe\Woody\Event\MouseAdapter::mouseReleased
   */
  public function testMousePressedMouseReleased() {
    $event = $this->getMockBuilder('\ws\loewe\Woody\Event\MouseEvent')
      ->disableOriginalConstructor()
      ->getMock();

    $this->adapter = new MouseAdapter(null, null);
    $this->assertEquals(0, $this->callbackExecuted);

    $this->adapter->mousePressed($event);
    $this->assertEquals(0, $this->callbackExecuted);

    $this->adapter->mouseReleased($event);
    $this->assertEquals(0, $this->callbackExecuted);

    $this->adapter = new MouseAdapter(
      function() {
        $this->callbackExecuted = 1;
      },
      function() {
        $this->callbackExecuted = 2;
      });
    $this->assertEquals(0, $this->callbackExecuted);

    $this->adapter->mousePressed($event);
    $this->assertEquals(1, $this->callbackExecuted);

    $this->adapter->mouseReleased($event);
    $this->assertEquals(2, $this->callbackExecuted);
  }
}