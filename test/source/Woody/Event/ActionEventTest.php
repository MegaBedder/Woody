<?php

namespace ws\loewe\Woody\Event;

use \ws\loewe\Woody\Components\Windows\MainWindow;
use \ws\loewe\Woody\Components\Controls\EditBox;
use \ws\loewe\Utils\Geom\Point;
use \ws\loewe\Utils\Geom\Dimension;

/**
 * Test class for ActionEvent.
 * Generated by PHPUnit on 2012-07-04 at 22:19:40.
 */
class ActionEventTest extends \PHPUnit_Framework_TestCase {
  /**
   * @var ActionEvent the event to be tested
   */
  private $event = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $eventInfo = $this->getMockBuilder('\ws\loewe\Woody\Event\EventInfo')
      ->disableOriginalConstructor()
      ->getMock();
    
    $this->event = new ActionEvent($eventInfo);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests creating the event.
   *
   * @covers \ws\loewe\Woody\Event\ActionEvent::__construct
   * @covers \ws\loewe\Woody\Event\Event::__construct
   */
  public function testConstruct() {
    $this->assertInstanceOf('\ws\loewe\Woody\Event\ActionEvent', $this->event);
  }

 /**
   * This method tests dispatching the event.
   *
   * @covers \ws\loewe\Woody\Event\ActionEvent::dispatch
   */
  public function testDispatch() {
    $window   = new MainWindow('MainWindow', Point::createInstance(50, 50), Dimension::createInstance(300, 200));
    $editbox  = new EditBox('', Point::createInstance(20, 20), Dimension::createInstance(100, 18));
    $window->create()->getRootPane()->add($editbox);

    $actionListener = $this->getMockBuilder('\ws\loewe\Woody\Event\ActionAdapter')
      ->disableOriginalConstructor()
      ->getMock();

    $actionListener->expects($this->once())->method('actionPerformed');
    $editbox->addActionListener($actionListener);

    $event = new ActionEvent(new EventInfo(0, $editbox->getID(), $editbox, 0, 0));
    $event->dispatch();

    $window->close();
  }

  /**
   * This method tests the string representation of the action event.
   *
   * @covers \ws\loewe\Woody\Event\ActionEvent::__toString
   * @covers \ws\loewe\Woody\Event\Event::__toString
   */
  public function testToString() {
    $this->assertTrue(strpos($this->event->__toString(), 'A/C/S = ') !== FALSE);
  }
}