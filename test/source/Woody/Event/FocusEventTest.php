<?php

namespace Woody\Event;

use \Woody\App\TestApplication;
use \Woody\Components\Controls\EditBox;
use \Woody\Components\Timer\Timer;
use \Utils\Geom\Point;
use \Utils\Geom\Dimension;

/**
 * Test class for FocusEvent.
 * Generated by PHPUnit on 2012-06-26 at 21:13:09.
 */
class FocusEventTest extends \PHPUnit_Framework_TestCase {
  /**
   * @var FocusEvent the event to be tested
   */
  private $event = null;

  /**
   * a edit box for testing
   *
   * @var \Woody\Components\Controls\EditBox
   */
  private $control1 = null;

  /**
   * another edit box for testing
   *
   * @var \Woody\Components\Controls\EditBox
   */
  private $control2 = null;

  /**
   * the test application
   *
   * @var \Woody\App\TestApplication
   */
  private $application = false;

/**
   * the timer for the test application
   *
   * @var \Woody\Components\Timer\Timer
   */
  private $timer = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests creating the event.
   *
   * @covers \Woody\Event\FocusEvent::__construct
   * @covers \Woody\Event\Event::__construct
   */
  public function testConstruct() {
    $this->event = new FocusEvent(0, 0, 0, 0, 0);

    $this->assertInstanceOf('\Woody\Event\FocusEvent', $this->event);
  }

  /**
   * This method tests retrieving the component that gained the focus.
   *
   * @covers \Woody\Event\FocusEvent::getFocusGainedComponent
   * @covers \Woody\Event\FocusEvent::getFocusLostComponent
   * @covers \Woody\Event\FocusEvent::__toString
   * @covers \Woody\Event\Event::__toString
   */
  public function testGetFocusGainedComponent() {
    $this->application  = new TestApplication();
    $this->control1     = new EditBox('', new Point(20, 20), new Dimension(100, 18));
    $this->control2     = new EditBox('', new Point(20, 45), new Dimension(100, 18));

    $this->application->getWindow()->getRootPane()->add($this->control1);
    $this->application->getWindow()->getRootPane()->add($this->control2);

    $this->timer = new Timer(function() {
      $this->event = new FocusEvent($this->application->getWindow()->getControlID(),
        $this->control1->getID(),
        $this->control1->getControlID(),
        0,
        0,
        null);
      $this->assertEquals($this->control1, $this->event->getFocusGainedComponent());
      $this->assertNull($this->event->getFocusLostComponent());

      $this->event = new FocusEvent($this->application->getWindow()->getControlID(),
        $this->control2->getID(),
        $this->control2->getControlID(),
        0,
        0,
        $this->control1);
      $this->assertEquals($this->control1, $this->event->getFocusLostComponent());
      $this->assertEquals($this->control2, $this->event->getFocusGainedComponent());

      $this->assertTrue(strpos($this->event->__toString(), 'gained = ') !== FALSE);

      $this->timer->destroy();
      $this->application->stop();
    }, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();
    $this->application->start();
  }
}