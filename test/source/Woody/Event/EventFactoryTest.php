<?php

namespace Woody\Event;

/**
 * Test class for EventFactory.
 * Generated by PHPUnit on 2012-09-04 at 22:37:42.
 */
class EventFactoryTest extends \PHPUnit_Framework_TestCase {
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * @covers \Woody\Event\EventFactory::createEvent
   * @covers \Woody\Event\EventFactory::createFocusEvent
   * @covers \Woody\Event\EventFactory::createMouseEvent
   * @covers \Woody\Event\EventFactory::createKeyEvent
   * @covers \Woody\Event\EventFactory::createActionEvent
   * @covers \Woody\Event\EventFactory::createWindowResizeEvent
   * @covers \Woody\Event\EventFactory::createWindowClosedEvent
   */
  public function testCreateEvent() {
    
    $this->assertInstanceOf('\Woody\Event\WindowCloseEvent', EventFactory::createEvent(new EventInfo(0, IDCLOSE, 0, 0, 0))[0]);

    //$this->assertInstanceOf('\Woody\Event\TimerEvent', EventFactory::createEvent(new EventInfo(1, 1, 1, 0, 0))[0]);

    $this->assertInstanceOf('\Woody\Event\FocusEvent', EventFactory::createEvent(new EventInfo(0, 0, 0, WBC_GETFOCUS, 0))[0]);

    $this->assertInstanceOf('\Woody\Event\MouseEvent', EventFactory::createEvent(new EventInfo(0, 0, 0, WBC_MOUSEDOWN, 0))[0]);

    $this->assertInstanceOf('\Woody\Event\KeyEvent', EventFactory::createEvent(new EventInfo(0, 0, 0, WBC_KEYDOWN, 0))[0]);

    $this->assertInstanceOf('\Woody\Event\WindowResizeEvent', EventFactory::createEvent(new EventInfo(0, 0, 0, WBC_RESIZE, 0))[0]);
  }
}