<?php

namespace Woody\Event;

use \Woody\Components\Timer\Timer;
use \Utils\Geom\Point;
use \Utils\Geom\Dimension;

/**
 * Test class for TimeoutEvent.
 * Generated by PHPUnit on 2012-09-04 at 20:57:12.
 */
class TimeoutEventTest extends \PHPUnit_Framework_TestCase {

  /**
   * the flag to determine if the event was dispatched or not
   *
   * @var boolean 
   */
  private $isDispatched = FALSE;
  
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests creating the event.
   *
   * @covers \Woody\Event\TimeoutEvent::__construct
   * @covers \Woody\Event\Event::__construct
   */
  public function testConstruct() {
    $eventInfo = $this->getMockBuilder('\Woody\Event\EventInfo')
      ->disableOriginalConstructor()
      ->getMock();
    
    $event = new TimeoutEvent($eventInfo);
    $this->assertInstanceOf('\Woody\Event\TimeoutEvent', $event);
  }

 /**
   * This method tests dispatching the event.
   *
   * @covers \Woody\Event\TimeoutEvent::dispatch
   */
  public function testDispatch() {
    $window = $this->getMockBuilder('\Woody\Components\Windows\MainWindow')
      ->disableOriginalConstructor()
      ->getMock();
    
    $this->assertFalse($this->isDispatched);
    
    $timer = new Timer(function($event) {$this->isDispatched = TRUE;}, $window, 1000);
    
    $event = new TimeoutEvent(new EventInfo(0, $timer->getID(), $window, 0, 0));
    $event->dispatch();
    
    $this->assertTrue($this->isDispatched);
  }
}