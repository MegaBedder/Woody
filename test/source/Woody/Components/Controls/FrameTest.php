<?php

namespace Woody\Components\Controls;

use \Utils\Geom\Dimension;
use \Utils\Geom\Point;
use \Woody\App\TestApplication;
use \Woody\Components\Timer\Timer;
use \Woody\Layouts\GridLayout;

/**
 * Test class for EditBox.
 * Generated by PHPUnit on 2011-11-15 at 23:23:15.
 */
class FrameTest extends \PHPUnit_Framework_TestCase {
  /**
   * the frame to test
   *
   * @var Frame
   */
  private $frame = null;

  /**
   * the test application
   *
   * @var TestApplication
   */
  private $application = false;

  /**
   * the timer for the test application
   *
   * @var \Woody\Components\Timer\Timer
   */
  private $timer = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->application = new TestApplication();

    $this->frame = new Frame('frameLabel', new Point(20, 20), new Dimension(100, 18));

    $this->application->getWindow()->getRootPane()->add($this->frame);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests adding components to the frame.
   *
   * @covers \Woody\Components\Component::getWindow
   * @covers \Woody\Components\Controls\Frame::add
   * @covers \Woody\Components\Controls\Control::create
   */
  public function testAdd() {
    $this->timer = new Timer(function() {
        $checkbox = new Checkbox(false, new Point(10, 10), new Dimension(10, 10));
        $this->assertNull($checkbox->getParent());

        $this->frame->add($checkbox);
        $this->assertEquals($this->frame, $checkbox->getParent());

        $this->frame->add($checkbox);
        $this->assertEquals($this->frame, $checkbox->getParent());

        $this->timer->destroy();
        $this->application->stop();
        }, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();

    $this->application->start();
  }

  /**
   * This method tests getting the components of the frame.
   *
   * @covers \Woody\Components\Controls\Frame::getComponents
   */
  public function testGetComponents() {
    $this->timer = new Timer(function() {
      $checkbox = new Checkbox(false, new Point(10, 10), new Dimension(10, 10));
      $this->frame->add($checkbox);

      $editbox = new EditBox('false', new Point(10, 40), new Dimension(100, 22));
      $this->frame->add($editbox);

      $components = $this->frame->getComponents();
      $this->assertEquals($components[0], $checkbox);
      $this->assertEquals($components[1], $editbox);

      $this->timer->destroy();
      $this->application->stop();
      },
      $this->application->getWindow(),
      Timer::TEST_TIMEOUT
    );

    $this->timer->start();

    $this->application->start();
  }

  /**
   * This method tests removing components to the frame.
   *
   * @covers \Woody\Components\Controls\Frame::remove
   */
  public function testRemove() {
    $this->timer = new Timer(function() {
          $checkbox = new Checkbox(false, new Point(10, 10), new Dimension(10, 10));
          $this->assertNull($checkbox->getParent());

          $this->frame->remove($checkbox);
          $this->assertNull($checkbox->getParent());

          $this->frame->add($checkbox);
          $this->assertEquals($this->frame, $checkbox->getParent());

          $this->frame->remove($checkbox);
          $this->assertNull($checkbox->getParent());

          $this->timer->destroy();
          $this->application->stop();
        }, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();

    $this->application->start();
  }

  /**
   * This method tests getting and setting the layout.
   *
   * @covers \Woody\Components\Controls\Frame::getLayout
   * @covers \Woody\Components\Controls\Frame::setLayout
   */
  public function testGetSetLayout() {
    $callback = function() {
      $this->assertNull($this->frame->getLayout());

      $layout = new GridLayout(1, 1);
      $this->frame->setLayout($layout);

      $this->assertEquals($layout, $this->frame->getLayout());

      $this->timer->destroy();
      $this->application->stop();
    };
    
    $this->timer = new Timer($callback, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();

    $this->application->start();
  }
}