<?php

namespace Woody\Components\Controls;

use \Woody\App\TestApplication;
use \Woody\Components\Timer\Timer;
use \Utils\Geom\Point;
use \Utils\Geom\Dimension;

/**
 * Test class for ListControl.
 * Generated by PHPUnit on 2011-12-03 at 21:32:53.
 */
class ListControlTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Woody\Components\Controls\ListControl
     */
    protected $listControl = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->listControl = $this->getMockForAbstractClass('\Woody\Components\Controls\ListControl',
            array(new Point(20, 20),
            new Dimension(100, 18)));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers \Woody\Components\Controls\ListControl::getModel
     */
    public function testGetModel() {
        $this->assertNull($this->listControl->getModel());

        $stubModel = $this->getMockBuilder('\Woody\Model\ListModel')
            ->disableOriginalConstructor()
            ->getMock();
        $this->listControl->setModel($stubModel);
        $this->assertNotNull($this->listControl->getModel());
    }

    /**
     * @covers \Woody\Components\Controls\ListControl::setModel
     */
    public function testSetModel() {
        $this->assertNull($this->listControl->getModel());

        $stubModel = $this->getMockBuilder('\Woody\Model\ListModel')
             ->disableOriginalConstructor()
             ->getMock();
        $this->listControl->setModel($stubModel);
        $this->assertNotNull($this->listControl->getModel());
        $this->assertSame($stubModel, $this->listControl->getModel());
    }

    /**
     * @covers \Woody\Components\Controls\ListControl::
     * @todo Implement testGetSelectedElement().
     */
    public function testGetSelectedElement() {
        // get a moch for the list control
        $this->listControl = $this->getMockBuilder('\Woody\Components\Controls\ListControl')
            ->setMethods(array('getSelectedIndex', 'getElementAt'))
            ->disableOriginalConstructor()
            ->getMock();

        // get a mock for the model ...
        $stubModel = $this->getMockBuilder('\Woody\Model\ListModel')
             ->disableOriginalConstructor()
             ->getMock();
        // ... returning '2' on each call to getElementAt
        $stubModel->expects($this->any())
            ->method('getElementAt')
            ->will($this->returnValue('2'));
        // set the model for the list control
        $this->listControl->setModel($stubModel);

        // define that ListControl::getSelectedIndex returns '1'
        $this->listControl
            ->expects($this->any())
            ->method('getSelectedIndex')
            ->will($this->returnValue('1'));

        $this->assertEquals(2, $this->listControl->getSelectedElement());
    }
}
