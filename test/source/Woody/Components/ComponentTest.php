<?php

namespace Woody\Components;

use \Woody\Components\Windows\MainWindow;
use \Woody\Components\Controls\Label;
use \Utils\Geom\Point;
use \Utils\Geom\Dimension;

/**
 * Test class for Component.
 * Generated by PHPUnit on 2011-11-15 at 23:23:15.
 */
class ComponentTest extends \PHPUnit_Framework_TestCase {
  /**
   * the component to test
   *
   * @var Component
   */
  private $component      = null;

  /**
   * the top-left corner of the component
   *
   * @var Point
   */
  private $topLeftCorner  = null;

  /**
   * the dimension of the component
   *
   * @var Dimension
   */
  private $dimension      = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->window = new MainWindow('MainWindow2', new Point(121, 343), new Dimension(300, 200));
    $this->window->create();

    $this->topLeftCorner  = new Point(20, 20);
    $this->dimension      = new Dimension(100, 20);
    $this->component      = new Label('TestLabel', $this->topLeftCorner, $this->dimension);
    $this->window->getRootPane()->add($this->component);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->window->destroy();
  }

  /**
   * This method tests getting the ids of the component.
   *
   * @covers \Woody\Components\Component::getUniqueID
   * @covers \Woody\Components\Component::getComponentByID
   * @covers \Woody\Components\Component::getControlID
   * @covers \Woody\Components\Component::getID
   */
  public function testGetIDs() {
    $id1 = Component::getUniqueID();
    $id2 = Component::getUniqueID();
    $this->assertEquals(1, $id2 - $id1);

    $component = Component::getComponentByID($this->component->getControlID());
    $this->assertEquals($this->component->getID(), $component->getID());
    $this->assertEquals($this->component->getControlID(), $component->getControlID());
  }

  /**
   * This method tests getting the parent of the component.
   *
   * @covers \Woody\Components\Component::getParent
   */
  public function testGetParent() {
    $this->assertEquals($this->window->getRootPane(), $this->component->getParent());
  }

  /**
   * This method tests getting the position of the component.
   *
   * @covers \Woody\Components\Component::getPosition
   */
  public function testGetPosition() {
    $this->assertEquals($this->topLeftCorner->x, $this->component->getPosition()->x);
    $this->assertEquals($this->topLeftCorner->y, $this->component->getPosition()->y);
    $this->assertFalse($this->topLeftCorner === $this->component->getPosition());
  }

  /**
   * This method tests getting the dimension of the component.
   *
   * @covers \Woody\Components\Component::getDimension
   */
  public function testGetDimension() {
    $this->assertEquals($this->dimension->width, $this->component->getDimension()->width);
    $this->assertEquals($this->dimension->height, $this->component->getDimension()->height);
    $this->assertFalse($this->dimension === $this->component->getDimension());
  }

  /**
   * This method tests adding, getting, and removing an action listener from the component.
   *
   * @covers \Woody\Components\Component::getActionListeners
   * @covers \Woody\Components\Component::addActionListener
   * @covers \Woody\Components\Component::removeActionListener
   */
  public function testActionListeners() {
    $this->assertEquals(0, $this->component->getActionListeners()->count());
    
    $actionListener = $this->getMockBuilder('\Woody\Event\ActionAdapter')
                                      ->disableOriginalConstructor()
                                      ->getMock();
    
    $this->component->addActionListener($actionListener);
    $this->assertEquals(1, $this->component->getActionListeners()->count());

    $this->component->removeActionListener($actionListener);
    $this->assertEquals(0, $this->component->getActionListeners()->count());
  }

  /**
   * This method tests adding, getting, and removing a focus listener from the component.
   *
   * @covers \Woody\Components\Component::getFocusListeners
   * @covers \Woody\Components\Component::addFocusListener
   * @covers \Woody\Components\Component::removeFocusListener
   */
  public function testFocusListeners() {
    $this->assertEquals(0, $this->component->getFocusListeners()->count());
    
    $focusListener = $this->getMockBuilder('\Woody\Event\FocusAdapter')
                                      ->disableOriginalConstructor()
                                      ->getMock();
    
    $this->component->addFocusListener($focusListener);
    $this->assertEquals(1, $this->component->getFocusListeners()->count());

    $this->component->removeFocusListener($focusListener);
    $this->assertEquals(0, $this->component->getFocusListeners()->count());
  }

  /**
   * This method tests adding, getting, and removing a key listener from the component.
   *
   * @covers \Woody\Components\Component::getKeyListeners
   * @covers \Woody\Components\Component::addKeyListener
   * @covers \Woody\Components\Component::removeKeyListener
   */
  public function testKeyListeners() {
    $this->assertEquals(0, $this->component->getKeyListeners()->count());
    
    $keyListener = $this->getMockBuilder('\Woody\Event\KeyAdapter')
                                      ->disableOriginalConstructor()
                                      ->getMock();
    
    $this->component->addKeyListener($keyListener);
    $this->assertEquals(1, $this->component->getKeyListeners()->count());

    $this->component->removeKeyListener($keyListener);
    $this->assertEquals(0, $this->component->getKeyListeners()->count());
  }

  /**
   * This method tests adding, getting, and removing a mouse listener from the component.
   *
   * @covers \Woody\Components\Component::getMouseListeners
   * @covers \Woody\Components\Component::addMouseListener
   * @covers \Woody\Components\Component::removeMouseListener
   */
  public function testMouseListeners() {
    $this->assertEquals(0, $this->component->getMouseListeners()->count());
    
    $mouseListener = $this->getMockBuilder('\Woody\Event\MouseAdapter')
                                      ->disableOriginalConstructor()
                                      ->getMock();
    
    $this->component->addMouseListener($mouseListener);
    $this->assertEquals(1, $this->component->getMouseListeners()->count());

    $this->component->removeMouseListener($mouseListener);
    $this->assertEquals(0, $this->component->getMouseListeners()->count());
  }

  /**
   * This method tests refreshing the component.
   *
   * @covers \Woody\Components\Component::refresh
   */
  public function testRefresh() {
    $this->assertSame($this->component, $this->component->refresh(TRUE));
    $this->assertSame($this->component, $this->component->refresh(FALSE));
  }

  /**
   * This method tests hiding and showing the component.
   *
   * @covers \Woody\Components\Component::disable
   * @covers \Woody\Components\Component::enable
   */
  public function testDisableEnable() {
    $this->assertSame($this->component, $this->component->disable());
    $this->assertSame($this->component, $this->component->enable());
  }

  /**
   * This method tests hiding and showing the component.
   *
   * @covers \Woody\Components\Component::hide
   * @covers \Woody\Components\Component::show
   */
  public function testHideShow() {
    $this->assertSame($this->component, $this->component->hide());
    $this->assertSame($this->component, $this->component->show());
  }
}