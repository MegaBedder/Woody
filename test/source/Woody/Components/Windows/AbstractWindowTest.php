<?php

namespace Woody\Components\Windows;

use \Utils\Geom\Point;
use \Utils\Geom\Dimension;
use \Woody\System\WindowConstraints;
use \Woody\Components\Timer\Timer;
use \Woody\WinBinderErrorException;

/**
 * Test class for AbstractWindow.
 * Generated by PHPUnit on 2010-11-25 at 20:49:16.
 */
class AbstractWindowTest extends \PHPUnit_Framework_TestCase {
  /**
   * @var AbstractWindow
   */
  protected $window;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->window = new MainWindow('MainWindow', new Point(50, 50), new Dimension(300, 200));

    $this->window->create(null);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->window->destroy();
  }

  /**
   * This method tests constructing the window.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::__construct
   * @covers \Woody\Components\Component::__construct
   */
  public function testConstruct() {
    $this->window2 = new MainWindow('MainWindow2', new Point(12, 34), new Dimension(456, 789));

    $this->assertEquals($this->window2->getPosition()->x, 12);
    $this->assertEquals($this->window2->getPosition()->y, 34);

    $this->assertEquals($this->window2->getDimension()->width, 456);
    $this->assertEquals($this->window2->getDimension()->height, 789);

    $this->assertNull($this->window2->getControlID());
    $this->assertNotNull($this->window2->getID());
  }

  /**
   * This method tests creating the window.
   *
   * @covers \Woody\Components\Component::create
   * @covers \Woody\Components\Windows\AbstractWindow::getParameters
   */
  public function testCreate() {
    $this->window3 = new MainWindow('MainWindow3', new Point(34, 12), new Dimension(789, 456));

    $this->window3->create();

    $this->assertNotNull($this->window3->getControlID());
    $this->assertNotNull($this->window3->getID());

    $this->window3->destroy();
  }

  /**
   * This method tests destroying the window.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::destroy
   */
  public function testDestroy() {
    $this->window4 = new MainWindow('MainWindow4', new Point(11, 22), new Dimension(555, 333));

    $this->window4->create();
    $this->window4->destroy();

    $this->assertEquals($this->window4->getPosition()->x, 11);
    $this->assertEquals($this->window4->getPosition()->y, 22);

    $this->assertEquals($this->window4->getDimension()->width, 555);
    $this->assertEquals($this->window4->getDimension()->height, 333);

    try {
      wb_get_id($this->window4->getControlID());
    }
    catch(WinBinderErrorException $e) {
      return;
    }

    $this->fail('The expected WinBinderErrorException has not been raised.');
  }

  /**
   * This method tests starting the event loop of the window.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::startEventHandler
   */
  public function testStartEventHandler() {
    $this->markTestIncomplete(
          'Implement this in isolation - otherwise too many side-effects/dependencies'
        );
  }

  /**
   * This method tests adding components to the window.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::add
   */
  public function testAdd() {
    $checkbox = new \Woody\Components\Controls\Checkbox(false, new Point(10, 10), new Dimension(10, 10));

    $this->window->add($checkbox);

    $this->assertEquals($this->window, $checkbox->getParent());

    $this->window2 = new MainWindow('MainWindow2', new Point(11, 22), new Dimension(555, 333));
    $this->window2->create();
    $this->window2->add($checkbox);

    $this->assertEquals($this->window2, $checkbox->getParent());

    $this->window2->destroy();
  }

  /**
   * This method tests adding components to the window.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::remove
   */
  public function testRemove() {
    $this->markTestIncomplete(
      'Implement this in isolation - otherwise too many side-effects/dependencies'
    );
    /*
    $this->window333 = new MainWindow('MainWindow333', new Point(11, 22), new Dimension(555, 333));
    $this->window333->create(null);
    $this->timer3333 = new Timer(function() {
          //$this->timer->destroy();
          //$this->window333->destroy();
          $this->window333->add($this->checkbox);
          var_dump('3: '.microtime(true));
          $this->assertEquals(1, 1);
          $this->window444->startEventHandler();
        }, $this->window333, 2000);

    $this->window444 = new MainWindow('MainWindow444', new Point(500, 522), new Dimension(555, 333));
    $this->window444->create(null);
    $this->timer4444 = new Timer(function() {
          $this->window444->add($this->checkbox);
          //$this->timer->destroy();
          //$this->window333->destroy();
          var_dump('4: '.microtime(true));
          $this->assertEquals(1, 1);
        }, $this->window444, 2000);

    $this->checkbox = new \Woody\Components\Controls\Checkbox(false, new Point(10, 10), new Dimension(10, 10));

    $this->window444->add($this->checkbox);

    $this->timer3333->start();
    sleep(1);
    $this->timer4444->start();
    var_dump('1: '.microtime(true));
    $this->window333->startEventHandler();
    var_dump('2: '.microtime(true));*/
  }

  /**
   * This method tests moving the window by an offset.
   *
   * @covers \Woody\Components\Component::moveBy
   */
  public function testMoveBy() {
    $this->window->moveBy(new Dimension(10, 10));
    $this->assertEquals(60, $this->window->getPosition()->x);
    $this->assertEquals(60, $this->window->getPosition()->y);

    $this->window->moveBy(new Dimension(100, 300));
    $this->assertEquals(160, $this->window->getPosition()->x);
    $this->assertEquals(360, $this->window->getPosition()->y);

    $this->window->moveBy(new Dimension(-300, 300));
    $this->assertEquals(0, $this->window->getPosition()->x);
    $this->assertEquals(660, $this->window->getPosition()->y);

    $this->window->moveBy(new Dimension(140, -660));
    $this->assertEquals(140, $this->window->getPosition()->x);
    $this->assertEquals(0, $this->window->getPosition()->y);

    $this->window->moveBy(new Dimension(300, 200));
    $this->assertEquals(440, $this->window->getPosition()->x);
    $this->assertEquals(200, $this->window->getPosition()->y);
  }

  /**
   * This method tests moving the window to a location.
   *
   * @covers \Woody\Components\Component::moveTo
   */
  public function testMoveTo() {
    $this->window->moveTo(new Point(0, 0));
    $this->assertEquals(0, $this->window->getPosition()->x);
    $this->assertEquals(0, $this->window->getPosition()->y);

    $this->window->moveTo(new Point(400, 300));
    $this->assertEquals(400, $this->window->getPosition()->x);
    $this->assertEquals(300, $this->window->getPosition()->y);

    $this->window->moveTo(new Point(4000, 3000));
    $this->assertEquals(4000, $this->window->getPosition()->x);
    $this->assertEquals(3000, $this->window->getPosition()->y);

    $this->window->moveTo(new Point(-400, -300));
    $this->assertEquals(0, $this->window->getPosition()->x);
    $this->assertEquals(0, $this->window->getPosition()->y);

    $this->window->moveTo(new Point(0, 0));
    $this->assertEquals(0, $this->window->getPosition()->x);
    $this->assertEquals(0, $this->window->getPosition()->y);
  }

  /**
   * This method tests resizing the window by an offset.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::resize
   * @covers \Woody\Components\Component::resizeBy
   */
  public function testResizeBy() {return;
    $this->window->resizeBy(new Dimension(0, 0));
    $this->assertEquals(300, $this->window->getDimension()->width);
    $this->assertEquals(200, $this->window->getDimension()->height);

    $this->window->resizeBy(new Dimension(100, 200));
    $this->assertEquals(400, $this->window->getDimension()->width);
    $this->assertEquals(400, $this->window->getDimension()->height);

    $this->window->resizeBy(new Dimension(500, 600));
    $this->assertEquals(900, $this->window->getDimension()->width);
    $this->assertEquals(1000, $this->window->getDimension()->height);

    $this->window->resizeBy(new Dimension(-878, -966));
    $this->assertEquals(WindowConstraints::getInstance()->minWidth, $this->window->getDimension()->width);
    $this->assertEquals(WindowConstraints::getInstance()->minHeight, $this->window->getDimension()->height);

    $this->window->resizeBy(new Dimension(-200, -100));
    $this->assertEquals(WindowConstraints::getInstance()->minWidth, $this->window->getDimension()->width);
    $this->assertEquals(WindowConstraints::getInstance()->minHeight, $this->window->getDimension()->height);

    $this->window->resizeBy(new Dimension(168, 166));
    $this->assertEquals(300, $this->window->getDimension()->width);
    $this->assertEquals(204, $this->window->getDimension()->height);
  }

  /**
   * This method tests resizing the window to a specific dimension.
   *
   * @covers \Woody\Components\Windows\AbstractWindow::resize
   * @covers \Woody\Components\Component::resizeTo
   */
  public function testResizeTo() {
    $this->window->resizeTo(new Dimension(300, 200));
    $this->assertEquals(300, $this->window->getDimension()->width);
    $this->assertEquals(200, $this->window->getDimension()->height);

    $this->window->resizeTo(new Dimension(600, 400));
    $this->assertEquals(600, $this->window->getDimension()->width);
    $this->assertEquals(400, $this->window->getDimension()->height);

    $this->window->resizeTo(new Dimension(0, 0));
    $this->assertEquals(WindowConstraints::getInstance()->minWidth, $this->window->getDimension()->width);
    $this->assertEquals(WindowConstraints::getInstance()->minHeight, $this->window->getDimension()->height);

    $this->window->resizeTo(new Dimension(-100, -200));
    $this->assertEquals(WindowConstraints::getInstance()->minWidth, $this->window->getDimension()->width);
    $this->assertEquals(WindowConstraints::getInstance()->minHeight, $this->window->getDimension()->height);

    $this->window->resizeTo(new Dimension(300, 200));
    $this->assertEquals(300, $this->window->getDimension()->width);
    $this->assertEquals(200, $this->window->getDimension()->height);
  }
}