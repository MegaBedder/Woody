<?php

namespace ws\loewe\Woody\Util\Image;

use \ws\loewe\Utils\Geom\Point;
use \ws\loewe\Utils\Geom\Dimension;

/**
 * Test class for ImageResource.
 * Generated by PHPUnit on 2012-05-02 at 22:01:46.
 */
class ImageResourceTest extends \PHPUnit_Framework_TestCase {
  /**
   * the image resource to test
   *
   * @var ImageResource
   */
  protected $imageResource;

  /**
   * path to image file for testing loading of JPGs
   *
   * @var string
   */
  private $jpgImage = '../../../../data/woody.jpg';

  /**
   * path to image file for testing loading of BMPs
   *
   * @var string
   */
  private $bmpImage = '../../../../data/woody.jpg';

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->jpgImage = realpath(__DIR__.'/'.$this->jpgImage);
    $this->bmpImage = realpath(__DIR__.'/'.$this->bmpImage);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests creating the image resource.
   *
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::create
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::__construct
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::createResourceBlank
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::getDimension
   */
  public function testCreate() {
    $this->imageResource  = ImageResource::create(new Dimension(100, 50));
    $expected             = new Dimension(100, 50);
    $actual               = $this->imageResource->getDimension();

    $this->assertEquals($expected->width, $actual->width);
    $this->assertEquals($expected->height, $actual->height);
  }

  /**
   * This method tests creating the image resource.
   *
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::createFromFile
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::__construct
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::createResourceFromFile
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::getDimension
   */
  public function testCreateFromFile() {
    $this->imageResource  = ImageResource::createFromFile($this->jpgImage);
    $expected             = getimagesize($this->jpgImage);
    $actual               = $this->imageResource->getDimension();

    $this->assertEquals($expected[0], $actual->width);
    $this->assertEquals($expected[1], $actual->height);


    $this->imageResource = ImageResource::createFromFile($this->jpgImage, new Dimension(200, 100));
    $expected = new Dimension(200, 100);
    $actual   = $this->imageResource->getDimension();

    $this->assertEquals($expected->width, $actual->width);
    $this->assertEquals($expected->height, $actual->height);
  }

  /**
   * This method tests getting the resource for a jpg-image.
   *
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::getResource
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::isJpeg
   */
  public function testGetBitmapJpg() {
    $this->imageResource = ImageResource::createFromFile($this->jpgImage);

    $this->assertNotNull($this->imageResource->getResource());
  }

  /**
   * This method tests getting the resource for a bitmap-image.
   *
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::getResource
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::isJpeg
   */
  public function testGetBitmapBmp() {
    $this->imageResource = ImageResource::createFromFile($this->bmpImage);

    $this->assertNotNull($this->imageResource->getResource());
  }

  /**
   * This method tests drawing onto the image resource.
   *
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::drawLine
   * @covers \ws\loewe\Woody\Util\Image\ImageResource::drawRectangle
   */
  public function testDraw() {
    $this->imageResource = ImageResource::create(new Dimension(100, 50));

    $this->imageResource = $this->imageResource->drawLine(new Point(0, 0), new Point(100, 50), 0);
    $this->assertInstanceOf('ws\loewe\Woody\Util\Image\ImageResource', $this->imageResource);

    $this->imageResource = $this->imageResource->drawRectangle(new Point(0, 0), new Dimension(100, 50), 0);
    $this->assertInstanceOf('ws\loewe\Woody\Util\Image\ImageResource', $this->imageResource);
  }
}