<?php

namespace ws\loewe\Woody\App;

use \ws\loewe\Woody\Components\Timer\Timer;

/**
 * Test class for TestApplication.
 * Generated by PHPUnit on 2012-07-05 at 20:39:44.
 */
class TestApplicationTest extends \PHPUnit_Framework_TestCase {
  /**
   * @var TestApplication the application to test
   */
  private $application;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * This method tests creating the application.
   *
   * @covers \ws\loewe\Woody\App\TestApplication::__construct
   * @covers \ws\loewe\Woody\App\TestApplication::getTitle
   * @covers \ws\loewe\Woody\App\Application::__construct
   * @covers \ws\loewe\Woody\App\Application::getInstance
   */
  public function testConstruct() {
    $testCase = $this->getMockBuilder('\PHPUnit_Framework_TestCase')
      ->disableOriginalConstructor()
      ->getMock();
    $this->application = new TestApplication($testCase);

    $this->assertInstanceOf('\ws\loewe\Woody\App\Application', $this->application);
    $this->assertInstanceOf('\ws\loewe\Woody\App\Application', $this->application->getInstance());

    $callback = function() {
      $this->timer->destroy();
      $this->application->stop();
    };
    $this->timer = new Timer($callback, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();
    $this->application->start();
  }

  /**
   * This method tests getting the window from the application.
   *
   * @covers \ws\loewe\Woody\App\Application::getWindow
   */
  public function testGetWindow() {
    $this->application = new TestApplication();

    $this->assertInstanceOf('ws\loewe\Woody\Components\Windows\AbstractWindow', $this->application->getWindow());

    $callback = function() {
      $this->timer->destroy();
      $this->application->stop();
    };
    $this->timer = new Timer($callback, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();
    $this->application->start();
  }

  /**
   * This method tests starting and stopping the application.
   *
   * @covers \ws\loewe\Woody\App\TestApplication::start
   * @covers \ws\loewe\Woody\App\TestApplication::stop
   */
  public function testStartStop() {
    $this->application = new TestApplication();
    
    $callback = function() {
      $this->timer->destroy();
      $this->application->stop();
    };
    $this->timer = new Timer($callback, $this->application->getWindow(), Timer::TEST_TIMEOUT);

    $this->timer->start();
    $this->application->start();
  }
}