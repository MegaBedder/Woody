<?php
namespace Woody\Components\Windows;

use Woody\Utils\Geom\Point;
use Woody\Utils\Geom\Dimension;
use Woody\System\System;


//require_once dirname(__FILE__).'/../../../../source/Components/Windows/AbstractWindow.class.inc';

/**
 * Test class for AbstractWindow.
 * Generated by PHPUnit on 2010-11-25 at 20:49:16.
 */
class AbstractWindowTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractWindow
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MainWindow('myWin2', 'MyWin2', new Point(50, 50), new Dimension(300, 200));

        $this->object->create();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->destroy();
    }

    public function testMoveBy()
    {
        $this->object->moveBy(10, 10);
        $this->assertTrue($this->object->getPosition()->equals(new Point(60, 60)));

        $this->object->moveBy(100, 300);
        $this->assertTrue($this->object->getPosition()->equals(new Point(160, 360)));

        $this->object->moveBy(-300, 300);
        $this->assertTrue($this->object->getPosition()->equals(new Point(System::WIN_MIN_LEFT, 660)));

        $this->object->moveBy(140, -660);
        $this->assertTrue($this->object->getPosition()->equals(new Point(140, System::WIN_MIN_TOP)));

        $this->object->moveBy(300, 200);
        $this->assertTrue($this->object->getPosition()->equals(new Point(440, 200)));
    }

    public function testMoveTo()
    {
        $this->object->moveTo(0, 0);
        $this->assertTrue($this->object->getPosition()->equals(new Point(System::WIN_MIN_LEFT, System::WIN_MIN_TOP)));

        $this->object->moveTo(400, 300);
        $this->assertTrue($this->object->getPosition()->equals(new Point(400, 300)));

        $this->object->moveTo(4000, 3000);
        $this->assertTrue($this->object->getPosition()->equals(new Point(4000, 3000)));

        $this->object->moveTo(-400, -300);
        $this->assertTrue($this->object->getPosition()->equals(new Point(System::WIN_MIN_LEFT, System::WIN_MIN_TOP)));

        $this->object->moveTo(0, 0);
        $this->assertTrue($this->object->getPosition()->equals(new Point(System::WIN_MIN_LEFT, System::WIN_MIN_TOP)));
    }

    public function testResizeBy()
    {
//usleep(1000000);
        $this->object->resizeBy(0, 0);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(300, 200)));

        $this->object->resizeBy(100, 200);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(400, 400)));

        $this->object->resizeBy(500, 600);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(900, 1000)));

        $this->object->resizeBy(-878, -966);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(System::WIN_MIN_WIDTH, System::WIN_MIN_HEIGHT)));

        $this->object->resizeBy(-200, -100);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(System::WIN_MIN_WIDTH, System::WIN_MIN_HEIGHT)));

        $this->object->resizeBy(177, 166);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(300, 200)));
    }

    public function testResizeTo()
    {
        $this->object->resizeTo(300, 200);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(300, 200)));

        $this->object->resizeTo(600, 400);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(600, 400)));

        $this->object->resizeTo(0, 0);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(System::WIN_MIN_WIDTH, System::WIN_MIN_HEIGHT)));

        $this->object->resizeTo(-100, -200);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(System::WIN_MIN_WIDTH, System::WIN_MIN_HEIGHT)));

        $this->object->resizeTo(300, 200);
        $this->assertTrue($this->object->getDimension()->equals(new Dimension(300, 200)));
    }
}
?>
