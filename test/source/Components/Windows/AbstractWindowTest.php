<?php
namespace Woody\Components\Windows;

use Woody\Utils\Misc\Rectangle;


//require_once dirname(__FILE__).'/../../../../source/Components/Windows/AbstractWindow.class.inc';

/**
 * Test class for AbstractWindow.
 * Generated by PHPUnit on 2010-11-25 at 20:49:16.
 */
class AbstractWindowTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractWindow
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MainWindow('myWin2', 'MyWin2', new Rectangle(50, 50, 300, 200));
        $this->object->create();
        $this->object->initialize();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //$this->object->destroy();
    }

    /**
     * @todo Implement testDestroy().
     */
    public function testDestroy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreate().
     */
    public function testCreate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testInitialize().
     */
    public function testInitialize()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testMoveBy()
    {
        $this->object->moveBy(10, 10);
        $this->assertEquals(array(60, 60), $this->object->getPosition());
usleep(100000);
        $this->object->moveBy(100, 300);
        $this->assertEquals(array(160, 360), $this->object->getPosition());
usleep(100000);
        $this->object->moveBy(-300, 300);
        $this->assertEquals(array(-140, 660), $this->object->getPosition());
usleep(100000);
        $this->object->moveBy(140, -660);
        $this->assertEquals(array(0, 0), $this->object->getPosition());
usleep(100000);
        $this->object->moveBy(300, 200);
        $this->assertEquals(array(300, 200), $this->object->getPosition());usleep(50000);
    }

    public function testMoveTo()
    {
        $this->object->moveTo(0, 0);
        $this->assertEquals(array(0, 0), $this->object->getPosition());
usleep(100000);
        $this->object->moveTo(400, 300);
        $this->assertEquals(array(400, 300), $this->object->getPosition());
usleep(100000);
        $this->object->moveTo(4000, 3000);
        $this->assertEquals(array(4000, 3000), $this->object->getPosition());

        $this->object->moveTo(-400, -300);
        $this->assertEquals(array(-400, -300), $this->object->getPosition());
usleep(100000);
        $this->object->moveTo(0, 0);
        $this->assertEquals(array(0, 0), $this->object->getPosition());
    }

    /**
     * @todo Implement testResizeBy().
     */
    public function testResizeBy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testResizeTo().
     */
    public function testResizeTo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}
?>
