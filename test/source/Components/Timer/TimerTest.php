<?php

namespace Woody\Components\Timer;

use Woody\Components\Windows\MainWindow;
use Woody\Utils\Geom\Point;
use Woody\Utils\Geom\Dimension;

/**
 * Test class for Timer.
 * Generated by PHPUnit on 2011-11-16 at 21:19:10.
 */
class TimerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Woody\Components\Timer\Timer
     */
    private $object;

    /**
     * @var Woody\Components\Windows\MainWindow
     */
    private $window;

    /**
     * the counter for testing timer callback call-counts
     *
     * @var int
     */
    private $counter = 0;

    /**
     * This method sets up a plain window for testing.
     */
    protected function setUp()
    {
        $this->window = new MainWindow('timer test', new Point(50, 50), new Dimension(300, 200));

        $this->window->create(null);

        $this->counter = 0;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testStart().
     */
    public function testStart()
    {
        $this->object = new Timer(function()
                        {
                            $this->object->destroy();
                            $this->window->destroy();

                            $this->assertEquals(1, ++$this->counter);
                        }, 100);

        $this->object->start($this->window);

        $this->window->startEventHandler();
    }

    /**
     *
     */
    public function testRun()
    {
        $this->object = new Timer(function()
                        {
                            if(++$this->counter > 10)
                            {
                                $this->object->destroy();
                                $this->window->destroy();
                                $this->assertEquals(11, $this->counter);
                            }
                        }, 100);

        $this->object->start($this->window);

        $this->window->startEventHandler();
    }

    /**
     * @todo Implement testDestroy().
     */
    public function testDestroy()
    {
        $this->object = new Timer(function()
                        {
                            ++$this->counter;

                            $this->object->destroy();
                            $this->window->destroy();

                            $this->assertEquals(1, $this->counter);
                        }, 100);

        $this->object->start($this->window);

        $this->window->startEventHandler();
    }

    /**
     * @todo Implement testGetID().
     */
    public function testGetID()
    {
        $this->object = new Timer(function()
                        {
                            $this->assertEquals($this->window->getID() + 1, $this->object->getID());

                            $this->object->destroy();
                            $this->window->destroy();

                            $this->assertEquals($this->window->getID() + 1, $this->object->getID());
                        }, 100);

        $this->assertEquals($this->window->getID() + 1, $this->object->getID());

        $this->object->start($this->window);

        $this->assertEquals($this->window->getID() + 1, $this->object->getID());

        $this->window->startEventHandler();

        $this->assertEquals($this->window->getID() + 1, $this->object->getID());
    }
}