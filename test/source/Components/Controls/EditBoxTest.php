<?php

namespace Woody\Components\Controls;

use Woody\Components\Windows\MainWindow;
use Woody\Components\Timer\Timer;
use Woody\Utils\Geom\Point;
use Woody\Utils\Geom\Dimension;

/**
 * Test class for EditBox.
 * Generated by PHPUnit on 2011-11-15 at 23:23:15.
 */
class EditBoxTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var EditBox
     */
    public $object;

    public $counter = 0;

    public $result = 0;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->delay = 1000000;

        $this->window = new MainWindow('edit box test', new Point(50, 50), new Dimension(300, 200));

        $this->window->create(null);

        $this->object = new EditBox('testValue', new \Woody\Utils\Geom\Point(20, 20), new \Woody\Utils\Geom\Dimension(100, 18));

        $this->window->add($this->object);

        $self = $this;
        $this->timer = new Timer(function() use ($self)
                        {
                            if(++$self->counter > 1)
                            {
                                $self->window->destroy();
                            }
                        }, 1000);

        $this->timer->start($this->window);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetValue().
     */
    check how do do proper testing here
        check with old implementation on how a timer can stop itself nicely
    public function testGetValue()
    {
        $self = $this;
        $this->timerTest = new Timer(function() use ($self)
                        {
            var_dump('123 - '.$self->object->getValue());
                            $self->assertEquals('testValue', $self->object->getValue());
                            $self->timerTest->destroy();
                        }, 100);
        $this->timerTest->start($this->window);

        $this->timerTest = new Timer(function() use ($self)
                        {
            var_dump('456 - '.$self->object->getValue(TRUE));
                            $self->assertEquals('testValue', $self->object->getValue(TRUE));
                            $self->timerTest->destroy();
                        }, 1000);
        $this->timerTest->start($this->window);

        $this->window->startEventHandler();
    }

    /**
     * @todo Implement testSetValue().
     */
    public function testSetValue()
    {/*
        $self = $this;
        $this->timerTest = new Timer(function() use ($self)
                        {
                            $self->object->setValue('');
                            $self->assertEquals('', $self->object->getValue());
                            var_dump($self->object->getValue());
                        }, 100);
        $this->timerTest->start($this->window);


        $this->timerTest = new Timer(function() use ($self)
                        {
                            $self->object->setValue('new Value');
                            $self->assertEquals('new Value', $self->object->getValue());
                            var_dump($self->object->getValue());
                        }, 100);
        $this->timerTest->start($this->window);


        $this->timerTest = new Timer(function() use ($self)
                        {
                            $self->object->setValue('12345');
                            $self->assertEquals('12345', $self->object->getValue());
                            var_dump($self->object->getValue());
                        }, 100);
        $this->timerTest->start($this->window);

        $this->window->startEventHandler();*/
    }

    /**
     * @todo Implement testSetReadOnly().
     */
    public function testSetReadOnly() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
